<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:helpers="clr-namespace:WPR.Helpers"
                    xmlns:controls="clr-namespace:WPR.Controls">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Base.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <ControlTemplate TargetType="{x:Type Button}" x:Key="WPRButtonTemplate">
        <Grid>
            <Border x:Name="ShadowBorder"
                    CornerRadius="{Binding Path=(helpers:ButtonHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    BorderThickness="{TemplateBinding BorderThickness }" 
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    Effect="{Binding Path=(helpers:ButtonHelper.ButtonShadow), RelativeSource={RelativeSource TemplatedParent}}"/>

            <controls:ClippingBorder CornerRadius="{Binding Path=(helpers:ButtonHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                     ClipToBounds="{Binding Path=(helpers:ButtonHelper.NoRippleCircleOutside), RelativeSource={RelativeSource TemplatedParent}}"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                <Grid>
                    <Border x:Name="BackGrid"
                                Background="{DynamicResource AnimationEnterColorBrush}" 
                                CornerRadius="{Binding Path=(helpers:ButtonHelper.BorderRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="0"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Opacity="0.4" />
                    <controls:Ripple x:Name="Ripple" 
                                         SnapsToDevicePixels="False"
                                         RippleSpeed="0.7"
                                         RippleMouseDownSpeed="0.7"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Background="{Binding Path=(helpers:RippleHelper.FeedbackBrush), RelativeSource={RelativeSource TemplatedParent}}"
                                         RippleInCenter="{Binding Path=(helpers:RippleHelper.IsCentered), RelativeSource={RelativeSource TemplatedParent}}"
                                         IsEnabled="{Binding Path=(helpers:RippleHelper.IsRippleEnabled), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}"/>
                    </controls:Ripple>
                </Grid>
            </controls:ClippingBorder>

        </Grid>
        <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="Loaded">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                         Duration="0:0:0.25"
                                                         From="0"
                                                         AccelerationRatio="0.5"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.2"
                                                         Storyboard.TargetName="BackGrid"  
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.2"
                                                         Storyboard.TargetName="BackGrid"  
                                                         Storyboard.TargetProperty="Opacity"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" TargetName="BackGrid" Value="0"/>
                <Setter TargetName="Ripple" Property="RippleSpeed" Value="0.1"/>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.3"
                                                         Storyboard.TargetName="BackGrid"  
                                                         Storyboard.TargetProperty="Opacity"
                                                         From="0"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False" >
                <Setter Property="Opacity" Value="0.5"/>
                <Setter TargetName="ShadowBorder" Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Кнопки-->
    <Style x:Key="WPRFlatButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseControl}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryColorBrush }"/>
        <Setter Property="Padding" Value="12,6"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="helpers:ButtonHelper.BorderRadius" Value="3"/>
        <Setter Property="helpers:RippleHelper.FeedbackBrush" Value="{DynamicResource LightPrimaryColorBrush}"/>
        <!--<Setter Property="helpers:ButtonHelper.AnimationColor" Value="{StaticResource AnimationEnterColorBrush}"/>-->
        <Setter Property="Template" Value="{StaticResource WPRButtonTemplate}"/>
    </Style>

    <Style x:Key="PrimaryWPRButton" TargetType="{x:Type Button}" BasedOn="{StaticResource WPRFlatButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColorBrush}" />
        <Setter Property="helpers:ButtonHelper.ButtonShadow" Value="{StaticResource ButtonShadow}"/>
    </Style>

    <Style x:Key="AccentWPRButton" TargetType="{x:Type Button}" BasedOn="{StaticResource PrimaryWPRButton }">
        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}"/>
    </Style>

    <Style x:Key="WPRToolButton" TargetType="{x:Type Button}" BasedOn="{StaticResource WPRFlatButton}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColorBrush}"/>
        <Setter Property="helpers:RippleHelper.FeedbackBrush" Value="{DynamicResource AnimationEnterColorBrush}"/>
        <Setter Property="helpers:RippleHelper.IsCentered" Value="True"/>
        <Setter Property="helpers:ButtonHelper.BorderRadius" Value="100"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="helpers:ButtonHelper.NoRippleCircleOutside" Value="False"/>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>

    <Style x:Key="WPRToolButtonNoRipple" TargetType="{x:Type Button}" BasedOn="{StaticResource WPRToolButton}">
        <Setter Property="helpers:RippleHelper.IsRippleEnabled" Value="False"/>
    </Style>

    <Style x:Key="MenuButton" TargetType="{x:Type Button}" BasedOn="{StaticResource WPRFlatButton}">
        <Setter Property="Padding" Value="3,0,3,0"/>
        <Setter Property="helpers:ButtonHelper.BorderRadius" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColorBrush}"/>
        <Setter Property="MinWidth" Value="44"/>
        <Setter Property="MinHeight" Value="44"/>
    </Style>

    <!--Текст в овальной рамке с тенью-->
    <Style x:Key="RoundedDecorator" TargetType="{x:Type ContentControl}">
        <Setter Property="Height" Value="28"/>
        <Setter Property="Margin" Value="1,0,1,0"/>
        <Setter Property="helpers:ButtonHelper.BorderRadius" Value="14"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColorBrush}"/>
        <Setter Property="Padding" Value="50,0,15,0"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundColorBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">

                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                                Effect="{StaticResource SmallShadow}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(helpers:ButtonHelper.BorderRadius), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        </Border>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Кнопка с выпрыгивающей текстовой подсказкой-->
    <Style x:Key="RoundedButtonWithFloatingHint" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource BackgroundColorBrush}"/>
        <Setter Property="helpers:RippleHelper.FeedbackBrush" Value="{StaticResource LightPrimaryColorBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColorBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Grid Margin="{TemplateBinding Padding}">
                        <ContentControl x:Name="Decorator"
                                        Margin="-500,0,2,0"
                                        Padding="15,0,50,0"
                                        RenderTransformOrigin="1,1"
                                        Style="{StaticResource RoundedDecorator}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:TextHelper.Hint)}">
                            <ContentControl.RenderTransform>
                                <ScaleTransform ScaleX="0" x:Name="ScaleDecorator"/>
                            </ContentControl.RenderTransform>
                        </ContentControl>
                        <Button Style="{StaticResource PrimaryWPRButton}"
                                Command="{TemplateBinding Command}"
                                CommandParameter="{TemplateBinding CommandParameter}"
                                     x:Name="But"
                                     Margin="0"
                                     helpers:ButtonHelper.BorderRadius="20"
                                     helpers:RippleHelper.FeedbackBrush ="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:RippleHelper.FeedbackBrush)}"
                                     Height="40" Width="40"
                                     Background="{TemplateBinding Background}"
                                     Foreground="{TemplateBinding Foreground}"
                                     Content="{TemplateBinding Content}"
                                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                     HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HorizontalContentAlignment" Value="Left">
                            <Setter Property="Margin" TargetName="Decorator" Value="2,0,-500,0"/>
                            <Setter Property="Padding" TargetName="Decorator" Value="50,0,15,0"/>
                            <Setter Property="RenderTransformOrigin" TargetName="Decorator" Value="0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="But" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.3"
                                                         To="1"
                                                         Storyboard.TargetName="ScaleDecorator"
                                                         EasingFunction="{StaticResource ElasticEaseOut}"
                                                         Storyboard.TargetProperty="ScaleX"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2"
                                                         To="0"
                                                         Storyboard.TargetName="ScaleDecorator"
                                                         Storyboard.TargetProperty="ScaleX"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="Tag" Value="Big">
                            <Setter TargetName="But" Property="Height" Value="50"/>
                            <Setter TargetName="But" Property="Width" Value="50"/>
                            <Setter TargetName="But" Property="helpers:ButtonHelper.BorderRadius" Value="25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RoundedButtonWithFloatingHintPrimary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource RoundedButtonWithFloatingHint}">
        <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColorBrush}"/>
    </Style>

    <Style x:Key="RoundedButtonWithFloatingHintAccent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource RoundedButtonWithFloatingHint}">
        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColorBrush}"/>
    </Style>

    <!--Служебная кнопка действий, изчезает если неактивна-->
    <Style x:Key="WPRToolHiddenButton" TargetType="{x:Type Button}" BasedOn="{StaticResource WPRToolButtonNoRipple}">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.2"
                                             To="0"
                                             Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)"/>
                            <DoubleAnimation Duration="0:0:0.2"
                                             To="0"
                                             Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.2"
                                             Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)"/>
                            <DoubleAnimation Duration="0:0:0.2"
                                             Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>